@page "/chartPage"
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.LineChart;
@using ChartJs.Blazor.Util;
@using Cr.UI.Data.Socket;
@using Cr.UI.Services.Interface;
@using Microsoft.AspNetCore.SignalR.Client;

@inject ISocketService Repo





<div style="width:100%; height:300px !important; margin-top:100px;">
    @if (_config != null)
    {
        <Chart Config="_config" @ref="_chart"></Chart>
    }
    
</div>
<br />
<button type="button" @onclick="@(()=>setData(1, 2, DateTime.Now.TimeOfDay.ToString()))" value="render">submit</button>
<br />
<br />
<br />
<br />

@if(rxdata != null)
{
    foreach(var adata in rxdata)
    {
        <p>RX Data : @adata</p>
    }
}
<br />
<br />
@if (txdata != null)
{
    foreach (var adata in txdata)
    {
        <p>TX Data : @adata</p>
    }
}



@code {
    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;


    private IDataset<int> dataset1 { get; set; }
    private IDataset<int> dataset2 { get; set; }

    private List<int> RX { get; set; } = new List<int>() { 1, 3, 4, 5 };
    private List<int> TX { get; set; } = new List<int>() { 10, 7, 8, 9 };

    private GetUserInfoFromMikrotikRequestModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Live Mikrotik Router Chart"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };

        dataset1 = new LineDataset<int>(RX)
            {
                Label = "RX Value",
                BackgroundColor = "#f7d7d7",
                BorderColor = "Red",
                //Fill = FillingMode.Disabled
            };

        dataset2 = new LineDataset<int>(TX)
            {
                Label = "TX Value",
                BackgroundColor = "#ddd7f7",
                BorderColor = "Blue",
                //Fill = FillingMode.Disabled
            };

        _config.Data.Labels.Add("00:00:00");
        _config.Data.Labels.Add("00:00:01");
        _config.Data.Labels.Add("00:00:02");
        _config.Data.Labels.Add("00:00:03");
        _config.Data.Labels.Add("00:00:04");
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);



        Model = new GetUserInfoFromMikrotikRequestModel();
        Model.RouterIp = "203.76.99.60";
        Model.UserName = "innovation";
        Model.Password = "I&I@123";
        Model.CustomerID = "1234";
        Model.CallerId = "Sanjib";

        //Model.RouterIp = "10.20.231.79";
        //Model.UserName = "api-bras";
        //Model.Password = "a@b@l#7ss!";
        //Model.CustomerIp = "1234";
        //Model.CallerId = "Sanjib";

        rxdata = new List<int>();
        txdata = new List<int>();


        await StartHubConnection();

        await Repo.CallChartEndpoint("Socket/CallSocket", Model);

        await AddTransferChartDataListener();


    }
    private List<int> rxdata { get; set; }
    private List<int> txdata { get; set; }
    private async Task setData(int rx, int tx, string timeLavel)
    {
        rxdata.Add(rx);
        rxdata.Add(tx);
        dataset1.Add(rx);
        dataset2.Add(tx);
        _config.Data.Labels.Add(timeLavel);
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);
        _chart.Update();
        //StateHasChanged();
    }

    private HubConnection _hubConnection;


    private async Task StartHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7219/Socket/CallSocket")
            .Build();
        await _hubConnection.StartAsync();
        if (_hubConnection.State == HubConnectionState.Connected)
            Console.WriteLine("connection started");

        
    }
    private async Task AddTransferChartDataListener()
    {
        _hubConnection.On<ChartDto>("TransferChartData", async (data) =>
        {
            setData(Convert.ToInt32(data.RxValue), Convert.ToInt32(data.TxValue), data.TimeLabel);
            //Console.WriteLine($"RX: {data.RxValue}, TX: {data.TxValue}, TimeLavel: {data.TimeLabel}");
        });
        
        //_hubConnection.On<List<ChartDto>>("TransferChartData", async (data) =>
        //{
        //    //await setData(data.RxValue, data.TxValue, data.TimeLabel);
        //    foreach (var ainfo in data)
        //    {
        //        setData(ainfo.RxValue, ainfo.TxValue, ainfo.TimeLabel);
        //        //Console.WriteLine($"RX: {ainfo.RxValue}, TX: {ainfo.TxValue}, TimeLavel: {ainfo.TimeLabel}");
        //    }
        //});
    }

    
}
