@using Cr.UI.Data;
@using Cr.UI.Data.Permission;
@using Cr.UI.Services.Interface;
@using Newtonsoft.Json;

@inject IToastService toastService;
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject AuthenticationStateProvider authenticationStateProvider

@inject ICrReportService _crReportService;
@inject IChangeRequirementService _changeRequirementService;
@inject IMenuAndPermissionService _menuPermissionService;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;


@if (AssignedEmployeeData == null)
{
    <p>Loading...</p>
}
else
{
    int sl = 1;
    <section class="bg-white p-5 mt-2 h-[85vh] flex-1 overflow-y-scroll middle-box-shadow scroll space-y-5 pb-10 w-[600px]">
        <div class="border-x border-t border-light_gray rounded-sm">
            @if (userRole.ToUpper().Contains("ADMIN"))
            {
                <div class="flex justify-between py-5 px-6">
                    <h3 class="font-bold text-lg">Assign</h3>
                    @{
                        var step = "block";
                    }
                    <button type="button" @onclick="()=>ChangeModalState(step)"
                            class="bg-my_blue text-white flex gap-2 items-center justify-center px-3 py-1 rounded-sm hover:bg-deep_blue duration-300">
                        <img src="/assets/create-icon.svg" alt="create-icon" class="filter invert brightness-0 pt-[2px]" />
                        Assign
                    </button>
                </div>
            }
            
            <div class="">
                <table class="border-y border-light_gray w-full">
                    <thead class="bg-[#FAFAFA]">
                        <tr class="border-b border-light_gray">
                            <th class="border-r border-light_gray flex justify-center w-full">
                                <button class="py-2 px-3 flex gap-2 items-center justify-center w-full hover:bg-active_bg duration-300 ease-in-out">
                                    SL No.
                                    <img src="/assets/sorter-icon.svg" alt="sorter-icon" class="" />
                                </button>
                            </th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Assigned Person</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">From</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">To</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Day</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Task Status</th>
                            <th class="py-2 px-3">Work is Done</th>
                            <th class="py-2 px-3">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        
                        @foreach (var aInfo in AssignedEmployeeData)
                        {
                            <tr class="border-b border-light_gray">
                                <td class="py-2 px-3 border-r border-light_gray text-center">@(sl++)</td>
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.EmpName</td>
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.StartDate</td>
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.EndDate</td>
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.TotalDay</td>
                                <td class="py-2 px-3 border-r border-light_gray">@(aInfo.Task == null ? "Incomplete" : aInfo.Task)</td>
                                <td>
                                    @if (getPermission["AssignToEmployee/UpdateAssignEmployeeTaskStatusIsCompleteOrIncomplete".ToLower()])
                                    {
                                        if (l3Id == aInfo.EmpId)
                                        {
                                            <button style="filter: invert(27%) sepia(92%) saturate(4800%) hue-rotate(352deg) brightness(95%) contrast(142%);" class="hover:opacity-75 duration-300 group p-1 px-2 rounded-full" @onclick="()=>ChangeTaskAsync(aInfo)">
                                                @if (aInfo.Task == "Completed")
                                                {
                                                    <img src="/assets/checkbox.png" style="width:25px; height:25px;" alt="Delete-Icon" class="cus-red-filter" />
                                                }
                                                else
                                                {
                                                    <img src="/assets/unchecked.png" style="width:25px; height:25px;" alt="Delete-Icon" class="cus-red-filter" />
                                                }
                                            </button>
                                        }

                                    }
                                </td>
                                <td class="py-2 px-3 flex gap-2 justify-center">
                                    @if (getPermission["AssignToEmployee/AssignEmployeeDelete".ToLower()])
                                    {
                                        <button style="filter: invert(27%) sepia(92%) saturate(4800%) hue-rotate(352deg) brightness(95%) contrast(142%);" class="hover:opacity-75 duration-300 group p-1 px-2 rounded-full" @onclick="()=>DeleteAssingeEmployee(aInfo)">
                                            <img src="/assets/Delete-Icon.svg" alt="Delete-Icon" class="cus-red-filter" />
                                        </button>
                                    }
                                </td>
                                
                                
                               
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="">
            @if (getPermission["crapprovalflow/addremark"])
            {
                <!-- FORM -->
                <div class="flex-1">
                    <EditForm class="pb-3" id="add-remark-form-btn" Model="@addRemarkRequest" OnValidSubmit="AddRemoark">
                        <!-- action="#" -->
                        <!-- page-9=form - start -->
                        <!-- textarea -->
                        <div class="">
                            <label for="Special-Instruction" class="text-my_gray pt-3 font-semibold text-lg">
                                Special Instruction
                            </label>

                            <textarea name="Special-Instruction" @bind="addRemarkRequest.Remark"
                                      id="Special-Instruction"
                                      cols="30"
                                      rows="5"
                                      placeholder="Enter Instruction"
                                      class="block w-full border px-2 py-1 rounded border-light_gray mt-2"></textarea>
                            <p class="text-rose-600"><ValidationMessage For="@(()=>addRemarkRequest.Remark)" /></p>
                        </div>
                    </EditForm>
                </div>


                <!-- form-btn-out of form start  -->

                <div class="flex md:gap-3 gap-1 justify-end mb-[20px]">
                    <button form="add-remark-form-btn"
                            type="submit"
                            class="bg-my_blue text-white hover:bg-deep_blue border border-my_blue hover:border-deep_blue md:px-6 md:py-2 px-2 py-1 rounded ease-in-out duration-300">
                        <!-- disable-bg-button -->
                        Update
                    </button>

                    @*<button form="add-remark-form-btn"
                        type="button"
                        class="border border-light_gray md:px-6 md:py-2 px-2 py-1 rounded hover:text-my_blue hover:border-my_blue ease-in-out duration-300">
                        Edit
                        </button>*@
                </div>
            }

            

            <!-- form-btn-out of form end  -->
        </div>
    </section>

    <div class="relative z-[100] @modalState" id="modal" aria-labelledby="modal-title" role="dialog" aria-modal="false">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
        <div class="fixed inset-0 z-10 overflow-y-auto">
            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                <AssignForm CrId="@CrId" AssignedEmployee="@AssignedEmployeeData" ChangeModalState="@ChangeModalState" CrAssignEmployeeList="@CrAssignEmployeeList" />
            </div>
        </div>
    </div>
}



@code {

    [Parameter] public long CrId { get; set; }
    private string modalState { get; set; }

    private List<AssignEmployeeListResponse> AssignedEmployeeData { get; set; }
    private AssignEmployeeListResponse aEmployee { get; set; }

    private AssignForm childAssignForm { get; set; }

    private AddRemarkRequestModel addRemarkRequest { get; set; }

    private string userRole { get; set; } = "USER";

    IDictionary<string, bool> getPermission { get; set; }

    private string l3Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        /* Permission Setup Start */
        l3Id = await localStorage.GetItemAsync<string>("subject");
        var name = await localStorage.GetItemAsync<string>("permissionStrList");
        List<string> nameList = name.Split(',').Select(p => p.Trim()).ToList();

        List<MenuSetupAndPermissionViewModel> strToObj = new List<MenuSetupAndPermissionViewModel>();
        var permissionCount = await localStorage.GetItemAsync<int>("permissionCount");
        if (permissionCount > 0)
        {
            for (var i = 0; i <= (permissionCount / 30); i++)
            {
                string localStorageGetPermission = string.Empty;
                localStorageGetPermission = await localStorage.GetItemAsync<string>($"permission{i}");
                if (!string.IsNullOrEmpty(localStorageGetPermission))
                {
                    strToObj.AddRange(JsonConvert.DeserializeObject<List<MenuSetupAndPermissionViewModel>>(localStorageGetPermission));
                }
            }
        }

        getPermission = new Dictionary<string, bool>();
        var perMiss = strToObj.Select(x => x.ControllerName.ToLower() + "/" + x.MethodName.ToLower()).ToList();
        if (strToObj.Count > 0)
        {
            foreach (var aName in perMiss)
            {
                var havePermission = nameList.Any(x => x == aName);
                getPermission.Add(aName, havePermission);
            }
        }
        /* Permission Setup End */



        userRole = await localStorage.GetItemAsync<string>("roles");
        modalState = "hidden";
        requestModel = new AssignEmployeeListReqModel();
        AssignedEmployeeData = new List<AssignEmployeeListResponse>();
        aEmployee = new AssignEmployeeListResponse();
        childAssignForm = new AssignForm();
        addRemarkRequest = new AddRemarkRequestModel();

        if (getPermission["assigntoemployee/getassignemployeeall"])
            await CrAssignEmployeeList();

    }


    private async Task ChangeModalState(string step)
    {
        await CrAssignEmployeeList();
        modalState = step;
    }

    private async Task UpdateAssingeEmployee(AssignEmployeeListResponse aInfo)
    {
        aEmployee = aInfo;
        //await childAssignForm.setValueForUpdate(aInfo);
        StateHasChanged();
        await ChangeModalState("block");

    }

    private async Task DeleteAssingeEmployee(AssignEmployeeListResponse aInfo)
    {
        if (!getPermission["AssignToEmployee/AssignEmployeeDelete".ToLower()])
        {
            toastService.ShowError("Permission Denied");
        }
        var response = await _changeRequirementService.DeleteAsync("AssignToEmployee/AssignEmployeeDelete/" + aInfo.Id);
        if (response.StatusCode == 200)
        {
            await showMessage(response);
            await CrAssignEmployeeList();
        }
        else if (response.StatusCode == 401)
        {
            var newRes = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            var res = await showMessage(newRes);
            if (res.StatusCode == 200)
            {
                await DeleteAssingeEmployee(aInfo);
            }
        }
        else
        {
            var newResponse = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            await showMessage(newResponse);
        }
    }

    private async Task ChangeTaskAsync(AssignEmployeeListResponse aInfo)
    {
        if (!getPermission["AssignToEmployee/UpdateAssignEmployeeTaskStatusIsCompleteOrIncomplete".ToLower()])
        {
            toastService.ShowError("Permission Denied");
        }
        var response = await _changeRequirementService.ChangeTaskAsync("AssignToEmployee/UpdateAssignEmployeeTaskStatusIsCompleteOrIncomplete/" + CrId);
        if (response.StatusCode == 200)
        {
            await showMessage(response);
            await CrAssignEmployeeList();
        }
        else if (response.StatusCode == 401)
        {
            var newRes = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            var res = await showMessage(newRes);
            if (res.StatusCode == 200)
            {
                await DeleteAssingeEmployee(aInfo);
            }
        }
        else
        {
            var newResponse = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            await showMessage(newResponse);
        }
    }

    private AssignEmployeeListReqModel requestModel { get; set; }
    private async Task CrAssignEmployeeList()
    {
        if (!(getPermission["assigntoemployee/getassignemployeeall"]))
        {
            toastService.ShowError("permission denied.");
            return;
        }
        requestModel.CrId = CrId.ToString();
        var response = await _crReportService.GetAssignEmployeeList("AssignToEmployee/GetAssignEmployeeAll", requestModel);
        if (response.StatusCode == 200)
        {
            AssignedEmployeeData = response.Data.item;
        }
        else if (response.StatusCode == 401)
        {
            var newRes = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            var res = await showMessage(newRes);
            if (res.StatusCode == 200)
            {
                await CrAssignEmployeeList();
            }
        }
        else
        {
            var newResponse = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            await showMessage(newResponse);
        }
    }

    private async Task AddRemoark()
    {
        if (!(getPermission["crapprovalflow/addremark"]))
        {
            toastService.ShowError("permission denied.");
            return;
        }
        addRemarkRequest.CrId = CrId;
        var response = await _changeRequirementService.AddRemark("CrApprovalFlow/AddRemark", addRemarkRequest);
        if (response.StatusCode == 200)
        {
            await showMessage(response);
        }
        else if (response.StatusCode == 401)
        {
            var newRes = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            var res = await showMessage(newRes);
            if (res.StatusCode == 200)
            {
                await CrAssignEmployeeList();
            }
        }
        else
        {
            var newResponse = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            await showMessage(newResponse);
        }
    }


    private async Task<ApiResponse> showMessage(ApiResponse apiResponse)
    {
        if (apiResponse.StatusCode == 200)
        {
            toastService.ShowSuccess(apiResponse.Message);
        }
        else if (apiResponse.StatusCode == 401)
        {
            var res = await userService.RefreshTokenAsync();
            if (res != null && res.Status == "invalid_grant")
            {
                await userService.removedLocalStorage();
                await ((CustomAuthenticationStateProvidore)authenticationStateProvider).MarkUserAsLoggedOut();
                NavigationManager.NavigateTo("/");
            }
            else if (res != null && res.Data != null)
            {
                UserModel user = (UserModel)res.Data;
                await userService.setLocalStorage(user);
                return res;
            }
        }
        else if (apiResponse != null && apiResponse.Status == "invalid_grant" && apiResponse.StatusCode == 400)
        {
            toastService.ShowError(apiResponse.Message);
            await userService.removedLocalStorage();
            await ((CustomAuthenticationStateProvidore)authenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            toastService.ShowError(apiResponse.Message);
        }
        return apiResponse;
    }
    
}
