@using Cr.UI.Data;
@using System.Security.Claims;
@using Cr.UI.Data.Permission;
@using Cr.UI.Services.Interface;
@using Newtonsoft.Json;

@inject IToastService toastService;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IUserService userService
@inject AuthenticationStateProvider authenticationStateProvider;

@inject ICrReportService _crReportService;
@inject IMenuAndPermissionService _menuPermissionService;


@if (ApprovalData == null)
{
    <p>Loading....</p>
}
else
{
    <section class="bg-white p-5 mt-2 h-[85vh] flex-1 overflow-y-scroll middle-box-shadow scroll space-y-5 pb-10 w-[600px]">
        <div class="border-x border-t border-light_gray rounded-sm">
            <h3 class="py-5 px-6 font-bold text-lg">Approver</h3>

            <div class="">
                <table class="border-y border-light_gray w-full">
                    <thead class="bg-[#FAFAFA]">
                        <tr class="border-b border-light_gray">
                            <th class="py-2 px-3 border-r border-light_gray text-start">Approver’s Name</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Designation</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Date</th>
                            <th class="py-2 px-3 border-r border-light_gray text-start">Status</th>
                            <th class="py-2 px-3">Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var aInfo in ApprovalData.FindAll(x=> x.IsPrincipleApprover == true).ToList())
                        {
                            <tr class="border-b border-light_gray">
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.ApproverName</td>
                                <td class="py-2 px-3 border-r border-light_gray">@aInfo.ApproverDesignation</td>
                                <td class="py-2 px-3 border-r border-light_gray">@(aInfo.StatusDate != null ? Convert.ToDateTime(aInfo.StatusDate).ToString("dddd, dd MMMM yyyy") : null)</td>
                                <td class="py-2 px-3 border-r border-light_gray">
                                    @if (@aInfo.Status == "Approved")
                                    {
                                        <p class="bg-teal-100 text-teal-600 text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                    }
                                    else if (@aInfo.Status == "Pending")
                                    {
                                        <p class="bg-gray-100 text-my_gray text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                    }else
                                    {
                                        <p class="bg-rose-400 text-white text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                    }

                                </td>
                                <td class="py-2 px-3">@aInfo.Remark</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @{
            var otherData = ApprovalData.FindAll(x => x.IsPrincipleApprover == false).ToList();
        }
        @if (otherData.Count > 0)
        {
            <div class="border-x border-t border-light_gray rounded-sm">
                <h3 class="py-5 px-6 font-bold text-lg">Approver</h3>

                <div class="">
                    <table class="border-y border-light_gray w-full">
                        <thead class="bg-[#FAFAFA]">
                            <tr class="border-b border-light_gray">
                                <th class="py-2 px-3 border-r border-light_gray text-start">Approver’s Name</th>
                                <th class="py-2 px-3 border-r border-light_gray text-start">Designation</th>
                                <th class="py-2 px-3 border-r border-light_gray text-start">Date</th>
                                <th class="py-2 px-3 border-r border-light_gray text-start">Status</th>
                                <th class="py-2 px-3">Remarks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var aInfo in otherData)
                            {
                                <tr class="border-b border-light_gray">
                                    <td class="py-2 px-3 border-r border-light_gray">@aInfo.ApproverName</td>
                                    <td class="py-2 px-3 border-r border-light_gray">@aInfo.ApproverDesignation</td>
                                    <td class="py-2 px-3 border-r border-light_gray">@(aInfo.StatusDate != null ? Convert.ToDateTime(aInfo.StatusDate).ToString("dddd, dd MMMM yyyy") : null)</td>
                                    <td class="py-2 px-3 border-r border-light_gray">
                                        @if (@aInfo.Status == "Approved")
                                        {
                                            <p class="bg-teal-100 text-teal-600 text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                        }
                                        else if (@aInfo.Status == "Pending")
                                        {
                                            <p class="bg-gray-100 text-my_gray text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                        }
                                        else
                                        {
                                            <p class="bg-rose-400 text-white text-sm py-1 px-2 rounded text-center">@aInfo.Status</p>
                                        }

                                    </td>
                                    <td class="py-2 px-3">@aInfo.Remark</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        }
        

        <p class="mb-[40px]">Note: The development scenario is stated along with the completion time.</p>

        @if(getPermission == null)
        {

        }else
        {
            @if (getPermission["assigntoemployee/getassignemployeeall"])
            {
                @foreach (var aInfo in AssignedEmployeeData)
                {
                    <div class="w-full flex item-center justify-between mt-1">
                        <p class="w-[20%] text-xs mr-[5px]">@aInfo.EmpName</p>
                        <div class="bg-gray-200 w-[80%] h-[15px] rounded-full flex item-center relative">
                            <div class="flex item-center justify-center bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: @((100* aInfo.TotalDay)/ LargestWorkingDay)%">@aInfo.TotalDay Days</div>
                            <div class="absolute right-0 top-[-20px]">@Convert.ToDateTime(aInfo.EndDate).ToString("dd/MM/yyyy")</div>
                        </div>
                    </div>
                }
            }
        }

        

    </section>

}





@code {

    [Parameter] public List<CrApprovalFlow> ApprovalData { get; set; }
    //[Parameter] public long CrId { get; set; }

    private UserModel user;
    ClaimsPrincipal claimsPrincipal;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private AssignEmployeeListReqModel requestModel { get; set; }

    private List<AssignEmployeeListResponse> AssignedEmployeeData { get; set; }

    private int LargestWorkingDay { get; set; }

    IDictionary<string, bool> getPermission { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        /* Permission Setup Start */
        var name = await localStorage.GetItemAsync<string>("permissionStrList");
        List<string> nameList = name.Split(',').Select(p => p.Trim()).ToList();
       
        List<MenuSetupAndPermissionViewModel> strToObj = new List<MenuSetupAndPermissionViewModel>();
        var permissionCount = await localStorage.GetItemAsync<int>("permissionCount");
        if (permissionCount > 0)
        {
            for (var i = 0; i <= (permissionCount / 30); i++)
            {
                string localStorageGetPermission = string.Empty;
                localStorageGetPermission = await localStorage.GetItemAsync<string>($"permission{i}");
                if (!string.IsNullOrEmpty(localStorageGetPermission))
                {
                    strToObj.AddRange(JsonConvert.DeserializeObject<List<MenuSetupAndPermissionViewModel>>(localStorageGetPermission));
                }
            }
        }

        getPermission = new Dictionary<string, bool>();
        var perMiss = strToObj.Select(x => x.ControllerName.ToLower() + "/" + x.MethodName.ToLower()).ToList();
        if (strToObj.Count > 0)
        {
            foreach (var aName in perMiss)
            {
                var havePermission = nameList.Any(x => x == aName);
                getPermission.Add(aName, havePermission);
            }
        }
        /* Permission Setup End */

        AssignedEmployeeData = new List<AssignEmployeeListResponse>();
        requestModel = new AssignEmployeeListReqModel();

        if(ApprovalData != null)
        {
            requestModel.CrId = ApprovalData.FirstOrDefault().CrId.ToString();

            if (getPermission["assigntoemployee/getassignemployeeall"])
                await CrAssignEmployeeList();
        }


    }

    private async Task CrAssignEmployeeList()
    {
        var response = await _crReportService.GetAssignEmployeeList("AssignToEmployee/GetAssignEmployeeAll", requestModel);
        if (response.StatusCode == 200)
        {
            AssignedEmployeeData = response.Data.item;
            if(AssignedEmployeeData.Count > 0)
                LargestWorkingDay = (int)AssignedEmployeeData.OrderByDescending(x => x.TotalDay).FirstOrDefault().TotalDay;
        }
        else if (response.StatusCode == 401)
        {
            var newRes = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            var res = await showMessage(newRes);
            if (res.StatusCode == 200)
            {
                await CrAssignEmployeeList();
            }
        }
        else
        {
            var newResponse = new ApiResponse()
                {
                    Status = response.Status,
                    StatusCode = response.StatusCode,
                    Message = response.Message
                };
            await showMessage(newResponse);
        }
    }


    

    private async Task<ApiResponse> showMessage(ApiResponse apiResponse)
    {
        if (apiResponse.StatusCode == 200)
        {
            toastService.ShowSuccess(apiResponse.Message);
        }
        else if (apiResponse.StatusCode == 401)
        {
            var res = await userService.RefreshTokenAsync();
            if (res != null && res.Status == "invalid_grant")
            {
                await userService.removedLocalStorage();
                await ((CustomAuthenticationStateProvidore)authenticationStateProvider).MarkUserAsLoggedOut();
                NavigationManager.NavigateTo("");
            }
            else if (res != null && res.Data != null)
            {
                UserModel user = (UserModel)res.Data;
                await userService.setLocalStorage(user);
                return res;
            }
        }
        else if (apiResponse != null && apiResponse.Status == "invalid_grant" && apiResponse.StatusCode == 400)
        {
            await userService.removedLocalStorage();
            await ((CustomAuthenticationStateProvidore)authenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("");
        }
        else
        {
            toastService.ShowError(apiResponse.Message);
        }
        return apiResponse;
    }

    
}
